{"version":3,"sources":["components/Menu.js","components/Scroll.js","components/Card.js","components/CardList.js","containers/App.js","registerServiceWorker.js","index.js","containers/star-wars-logo.svg"],"names":["Menu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","loaded","items","_this2","fetch","then","response","json","results","setState","_this3","_this$state","react_default","a","createElement","message","className","entries","map","_ref","_ref2","slicedToArray","key","value","onClick","menuClick","React","Component","Scroll","style","overflowY","border","height","children","Card","name","src","concat","alt","CardList","datos","x","resultsArray","push","data","i","components_Card","id","App","onMenuClick","event","url","target","swlogo","components_Menu","components_Scroll","components_CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.96e01684.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Menu extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      error: null,\r\n      loaded: false,\r\n      items: []\r\n    }\r\n  }\r\n  //Descargo las propiedades principales de SWAPI\r\n  componentDidMount(){\r\n    \r\n    fetch('https://swapi.co/api/')\r\n    .then(response => response.json())\r\n    .then(results => {\r\n          this.setState({\r\n            loaded: true,\r\n            items: results                                                 \r\n        });\r\n   },\r\n   error => {\r\n       this.setState({\r\n           loaded: true,\r\n           error\r\n       });\r\n   })\r\n  }\r\n\r\n  //Creo el navbar con los nombres y url de las propiedades principales de SWAPI\r\n  render() {\r\n      const { error, loaded, items} = this.state;\r\n      \r\n      if (error) {\r\n       return <div>Error: {error.message}</div>;\r\n     } else if (!loaded) {\r\n       return <div>Loading buttons . . . </div>;\r\n     } else {\r\n       return (\r\n         <div className=\"App-Options\">\r\n           {  \r\n               Object.entries(items).map(([key, value]) => {\r\n                  return (<button className=\" f6 grow br-pill ph3 pv2 mb2 mt2 mh1 dib black button-opt\" \r\n                  key={key} value={value} onClick={this.props.menuClick}> { key } </button>);\r\n               })\r\n           }\r\n         </div>\r\n       );\r\n      }\r\n  }\r\n   \r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{\r\n                     overflowY: 'scroll',\r\n                     border: '6px solid black'\r\n                    ,height: '700px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {name} = props;\r\n\r\n    return (\r\n        <div className='tc bg-light-gray dib br3 ma2 grow bw1 shadow-5'>\r\n            <img src={`https://robohash.org/set_set2/${name}?size=200x200`} alt='Foto' />\r\n            <h2>{name}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ datos }) => { \r\n\r\n  if (!datos.results){\r\n    return (\r\n      <div>\r\n        <h1>Oops! No Cards</h1>\r\n      </div>\r\n    );\r\n\r\n  } else {\r\n    var x;  \r\n    var resultsArray = [];\r\n      for (x in datos.results) {\r\n        resultsArray.push(datos.results[x]);\r\n      }\r\n  \r\n    return (\r\n      <div className=\"flex-auto\">\r\n          {\r\n            resultsArray.map((data,i) => {\r\n              return (\r\n                  <Card\r\n                      key={i}\r\n                      id={i} \r\n                      name={data.name}\r\n                  />\r\n                );\r\n            })\r\n          }\r\n      </div>\r\n    );\r\n  }\r\n       \r\n}\r\n     \r\nexport default CardList;","import React, { Component } from 'react';\r\nimport swlogo from './star-wars-logo.svg';\r\nimport './App.css';\r\nimport Menu from '../components/Menu';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      url:'https://swapi.co/api/people/',\r\n      items: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    fetch(this.state.url)\r\n    .then(response => response.json())\r\n    .then(results => {\r\n            this.setState({\r\n              items:  results\r\n            });\r\n          }\r\n    );\r\n  }\r\n  \r\n  onMenuClick = (event) => {\r\n\r\n    this.setState({\r\n      url: event.target.value\r\n    });\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    fetch(this.state.url)\r\n    .then(response => response.json())\r\n    .then(results => {\r\n            this.setState({\r\n              items:  results\r\n            });\r\n          }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <img src={swlogo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1 className=\"App-title\">Web App using SWAPI and React Exercise</h1>\r\n          </header>\r\n          <Menu menuClick={this.onMenuClick} />\r\n          <Scroll>\r\n            <CardList datos={this.state.items} />\r\n          </Scroll>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/star-wars-logo.751a045f.svg\";"],"sourceRoot":""}